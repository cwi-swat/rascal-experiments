module experiments/DDA/DDA
imports basic/Whitespace
imports basic/IdentifierCon
imports basic/IntCon

hiddens
  context-free start-symbols
    Program

exports
  
  sorts Program Stat Expr Identifier Type  
  %% Removed double declaration of Identifier
  %% Added missing declaration of Type

  context-free syntax
    Stat* -> Program

    "dda" Identifier "is" 
       "points" Identifier 
       "branch" Identifier
       "request" "(" Identifier "," Identifier ")" "=" Expr
       "supply" "(" Identifier "," Identifier ")" "=" Expr
       "end" -> Stat {cons("DDADecl")}
    
    "type" Identifier -> Stat
    "var" Identifier ":" Identifier -> Stat 
    "compute" Identifier ":" Identifier 
        "along" Identifier "from" Identifier "in" Expr "end" -> Stat {cons("Compute")}
    ";" -> Stat {cons("Nop")}
    
    IdCon -> Identifier
    Identifier -> Type
      
    Integer -> Expr {cons("Int")}    
    Identifier -> Expr {cons("Var")}
    "!" Expr -> Expr {cons("Not")}
    Expr "*" Expr -> Expr {left, cons("Mul")}
    Expr "+" Expr -> Expr {left, cons("Add")}
    Expr "-" Expr -> Expr {left, cons("Sub")}
    Expr "/" Expr -> Expr {left, cons("Div")}
    Expr ">" Expr -> Expr {left, cons("Gt")}
    Expr "<" Expr -> Expr {left, cons("Lt")}
    Expr ">=" Expr -> Expr {left, cons("Geq")}
    Expr "<=" Expr -> Expr {left, cons("Leq")}
    Expr "=" Expr -> Expr {left, cons("Eq")}
    Expr "and" Expr -> Expr {left, cons("And")}
    Expr "or" Expr -> Expr {left, cons("Or")}
    "(" Expr ")" -> Expr {bracket}
    Identifier "(" {Expr ","}* ")" -> Expr {cons("App")}
    "if" Expr "then" Expr "end" -> Expr {cons("IfThen")}
    "if" Expr "then" Expr "else" Expr "end" -> Expr {cons("If")}
    Identifier "[" Expr "]" -> Expr {cons("Idx")}

 context-free priorities
    "!" Expr -> Expr
   >
   {
    Expr "*" Expr -> Expr
    Expr "/" Expr -> Expr
   }
   >
   {
    Expr "+" Expr -> Expr
    Expr "-" Expr -> Expr
   }
   >
   {
    Expr ">" Expr -> Expr
    Expr "<" Expr -> Expr
    Expr ">=" Expr -> Expr
    Expr "<=" Expr -> Expr
    Expr "=" Expr -> Expr
   }
   >
    Expr "and" Expr -> Expr
   >
    Expr "or" Expr -> Expr
